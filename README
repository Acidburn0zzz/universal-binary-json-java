Universal Binary JSON Java Library
http://ubjson.org


About this project...
---------------------
This code base is actively under development and implements the latest 
specification of Universal Binary JSON (Draft 8).
	
Core spec-compliant I/O is performed through the UBJOutputStream and 
UBJInputStream classes; this code has been stable for a while and implements
the lowest level of interaction between the spec and Java constructs.

Higher-level I/O classes like the org.ubjson.io.reflect package are under
development but provide easier-to-use tools.

This project intends to eventually contain a multitude of layers of abstraction
as well as Java-based tools for the Universal Binary JSON spec like UBJ to JSON
converters, viewers, diff tools, etc.


Changelog
---------
11-28-11
	* Fixed UBJInputStreamParser implementation; nextType correctly implements
	logic to skip existing element (if called back to back) as well as validate
	the marker type it encounters before returning it to the caller.
	
	* Modified IObjectReader contract; a Parser implementation is required to 
	make traversing the UBJ stream possible without knowing what type of element
	is next.
	
11-27-11
	* Streamlined ByteArrayOutputStream implementation to ensure the capacity
	of the underlying byte[] is never grown unless absolutely necessary.
	
	* Rewrote class Javadoc for ByteArrayOutputStream to include a code snippet
	on how to use it.

11-26-11
	* Fixed major bug in how 16, 32 and 64-bit integers are re-assembled when
	read back from binary representations.
	
	* Added a numeric test to specifically catch this error if it ever pops up
	again.
	
	* Optimized reading and writing of numeric values in Input and Output
	stream implementations.
	
	* Optimized ObjectWriter implementation by streamlining the numeric read/write
	logic and removing the sub-optimal force-compression of on-disk storage.
	
	* Fixed ObjectWriter to match exactly with the output written by 
	UBJOutputStream.
	
	* Normalized all testing between I/O classes so they use the same classes
	to ensure parity.

11-10-11
	* DRAFT 8 Spec Support Added.

	* Added support for the END marker (readEnd) to the InputStreams which is
	required for proper unbounded-container support.
	
	* Added support for the END marker (writeEnd) to UBJOutputStream.
	
	UBJInputStreamParser must be used for properly support unbounded-containers
	because you never know when the 'E' will be encountered marking the end;
	so the caller needs to pay attention to the type marker that nextType()
	returns and respond accordingly.
	
	* Added readHugeAsBytes to InputStream implementations, allowing the bytes
	used to represent a HUGE to be read in their raw form with no decoding.
	
	This can save on processing as BigInteger and BigDecimal do their own decoding
	of byte[] directly.
	
	* Added readHugeAsChars to InputStream implementations, allowing a HUGE 
	value to be read in as a raw char[] without trying to decode it to a 
	BigInteger or BigDecimal.
	
	* Added writeHuge(char[]) to support writing out HUGE values directly from
	their raw char[] form without trying to decode from a BigInteger or
	BigDecimal.
	
	* readArrayLength and readObjectLenght were modified to return -1 when an 
	unbounded container length is encountered (255).

	* Fixed UBJInputStreamParser.nextType to correctly skip past any NOOP
	markers found in the underlying stream before returning a valid next type.
	
	* Normalized all reading of "next byte" to the singular
	UBJInputStream.nextMarker method -- correctly skips over NOOP until end of 
	stream OR until the next valid marker byte, then returns it.

	* Modified readNull behavior to have no return type. It is already designed
	to throw an exception when 'NULL' isn't found, no need for the additional
	return type.
	
	* Began work on a simple abstract representation of the UBJ data types as
	objects that can be assembled into maps and lists and written/read easily
	using the IO package.
	
	This is intended to be a higher level of abstraction than the IO streams,
	but lower level (and faster) than the reflection-based work that inspects
	user-provided classes.
	
	* Refactored StreamDecoder and StreamEncoder into the core IO package, 
	because they are part of core IO.
	
	* Refactored StreamParser into the io.parser package to more clearly denote
	its relationship to the core IO classes. It is a slightly higher level
	abstraction ontop of the core IO, having it along side the core IO classes
	while .reflect was a subpackage was confusing and suggested that 
	StreamParser was somehow intended as a swapable replacement for 
	UBJInputStream which is not how it is intended to be used.
	
	* Refactored org.ubjson.reflect to org.ubjson.io.reflect to more correctly
	communicate the relationship -- the reflection-based classes are built on
	the core IO classes and are just a higher abstraction to interact with UBJSON
	with.
	
	* Renamed IDataType to IMarkerType to follow the naming convention for the
	marker bytes set forth by the spec doc.


10-14-11
	* ObjectWriter rewritten and works correctly. Tested with the example test
	data and wrote out the compressed and uncompressed formats files correctly
	from their original object representation.
	
	* Added support for reading and writing huge values as BigInteger as well
	as BigDecimal.
	
	* Added automatic numeric storage compression support to ObjectWriter - based
	on the numeric value (regardless of type) the value will be stored as the
	smallest possible representation in the UBJ format if requested.
	
	* Added mapping support for BigDecimal, BigInteger, AtomicInteger and 
	AtomicLong to ObjectWriter.
	
	* Added readNull and readBoolean to the UBJInputStream and 
	UBJInputStreamParser implementations to make the API feel complete and feel
	more natural to use.

10-10-11
	* com.ubjson.io AND com.ubjson.io.charset are finalized against the 
	Draft 8 specification.
	
	* The lowest level UBJInput/OuputStream classes were tightened up to run as 
	fast as possible showing an 800ns-per-op improvement in speed.
	
	* Profiled core UBJInput/OuputStream classes using HPROF for a few million
	iterations and found no memory leaks and no performance traps; everything at
	that low level is as tight as it can be.
	
	* Stream-parsing facilities were moved out of the overloaded UBJInputStream
	class and into their own subclass called UBJInputStreamParser which operates
	exactly like a pull-parsing scenario (calling nextType then switching on the
	value and pulling the appropriate value out of the stream).
	
	* More example testing/benchmarking data checked into /test/java/com/ubjson/data
	
	Will begin reworking the Reflection based Object mapping in the 
	org.ubjson.reflect package now that the core IO classes are finalized.
	
	* Removed all old scratch test files from the org.ubjson package, this was
	confusing.

09-27-11
	* Initial check-in of core IO classes to read/write spec.


Status
------
Using the standard UBJInputStream, UBJInputStreamParser and UBJOutputStream
implementations to manually read/write UBJ objects is stable and tuned for
optimal performance.

Automatic mapping of objects to/from UBJ format via the reflection-based 
implementation is not tuned yet. Writing is implemented, but not tuned for
optimal performance and reading still has to be written.

	* org.ubjson.io - STABLE
	* org.ubjson.io.parser - STABLE
	* org.ubjson.io.reflect - ALPHA
	* org.ubjson.model - BETA


License
-------
This library is released under the Apache 2 License. See LICENSE.


Description
-----------
This project represents (the official?) Java implementations of the 
Universal Binary JSON specification: http://ubjson.org


Example
-------
Comming soon...


Performance
-----------
Comming soon...


Reference
---------
Universal Binary JSON Specification - http://ubjson.org
JSON Specification - http://json.org


Contact
-------
If you have questions, comments or bug reports for this software please contact
us at: software@thebuzzmedia.com